:root{
    /*-- nombre-variable*/

    /* 
    Enfoque de diseño basado en sistemas para establecer reglas y patrones escalables y reutilizables.
    Se personalizan variables para acceder a cualquier valor de una propiedad mediante la pseudoclase ":root" con la sintaxis --nombre-variable 
    */
    --font-primary:'Poppins', sans-serif;
    --color-primary:#A60311;
    --color-secondary:#D9042B;
    --color-text-primary:#D9CCB4;
    --color-text-secondary:#D98E04;
    --color-background: #590219;
    --color-Light:#F2F2F2;
    --color-dark:#0D0D0D;
}


body{ background-color: var(--color-background);
color:var(--color-Light); font-family:var(--font-primary);
}

.position{ 
     width: 100px;
     height: 100px;
     background-color: var(--color-dark);
}

/* La posición estatica es la posición por default de html, no se afecta por top, bottom, left ni right de ningún tipo */

#static{
    position:static;
    top: 20px;
    bottom: 20px;
    left: 20px;
    right: 20px;
    background-color: var(--color-text-secondary);
}
/*Es posicionado de forma relativa al elemto anterior o posición original y sí permite movimiento mediante propiedades top,bottom, left, right*/
#relative{
    position: relative;
    top: 5000px;
    left: 200px;
    background-color: var(--color-primary);

}


/*Se posiciona de forma relativa a su ancestro más cercano y no con respecto al viewport*/ 
#absolute{
        position: absolute;
        top:20px;
        left:200px;


    background-color: var(--color-Light); color:#0D0D0D
}

/*Este será el ancestro sobre el cual se moverá el hijo*/

#ancestro{
    position: absolute;
    width: 100px;
    height: 100px;
    background-color: var(--color-dark);
    border:solid var(--color-Light) 1px;
}

/* Nos permite mantener el elemento de manera fija en el viewport
#fixed{
    position: fixed;
    left:350px;
    top:500px;
    background-color:cadetblue;


}*/

#chat{
    /*border: solid var(--color-Light) 1px*/
    position: fixed;
    top:520px;
    left:370px;
    width: 60px;
    height: 60px;
}


#whatsapp-icon{
    width:100%
}
.display-inline{
    
    width: 100px;
    height: 100px;
    background-color: var(--color-primary);
    color: var(--color-dark);
    text-align: center;
    margin: 2px;
}



#display-1, #display-2{
    display: inline;
}

.display-block{
   /* display:block;*/
    display: inline-block;
    width: 100px;
    height: 100px;
    background-color: var(--color-secondary);
    color: var(--color-dark);
    text-align: center;
    margin: 2px;
}

@media(max-width:720px){
    .display-none{
        display:none;

}

}
/*Display Flex. Me permite trabajar de manera flexible con elementos anidados dentro de un ancestro. El flexbox se aplica en el container y tiene efecto sobre los hijos. 
Por default, la dirección de flex es en filas (row). Vamos a poder acceder a diversas propiedades para modificaqr el comportaminto de los elementos. 
>-flex-direction: column, column-reverse, row, row-reverse
>- flex-wrap:wrap,nowrap,wrap,wrap-reverse
>- justify-content:center, flex-start, flex-end. space between, space-around
>- align-item:star,end,center
>-align-self:flex-start,flex-end
*/

.container{
    display:flex;
    flex-direction: row;
    flex-wrap: wrap;
   justify-content: space-around;
    /*align-items: end;*/

    width:auto;
    height:350px;
    margin:10px;
    padding:15px;
    border-radius:10px;
    background-color: var(--color-text-secondary);

}
.display-flex{
    display:flex;
    justify-content:center;
    align-items:center; 

    width:100px;
    height:80px;
    margin:5px;
    padding:2px;
    text-align:center;
    background-color: var(--color-background);
    border-radius: 6px;
}



a{
    text-decoration: none;
    color:var(--color-Light)
}
/* Grid Layout
Elementos de una cuadrícula grid: contenedor, ítems, celdas, área
display: grid; 
*/
.grid{
    display:grid;
    grid-template-columns: auto;
    gap:20px; 
    /*grid-template-rows: auto auto auto auto;*/
    padding: 10px;
}

.display-grid{
    background-color: var(--color-text-secondary);
    border-radius: 3px;
    padding: 20px;
    text-align: center;
    border:solid var(--color-primary) 1px; 
}

.container-1{
    display:grid; 
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: 1fr 2fr 2fr 1fr;
    grid-template-areas: 
    "head head head"
    "aside section section"
    "aside article article"
    "footer footer footer"
    
    
    
    ;
    width: auto;
    height: 500px;
    border: solid var(--color-text-primary) 0.7px;
    text-align:center;
    margin:10px;
    font-size: 18px;

}
header{
    background-color: darkviolet;
    grid-area: head;
}


article{
    background-color: tomato;
    grid-area: article ;
}
aside{
    background-color: seagreen;
    grid-area: aside;
}
section{
    background-color: peru;
    grid-area: section;
}
footer{
    background-color: deepskyblue;
    grid-area:footer;
}
@media (max-width:720px) {
    .container-1{
        display:grid; 
        grid-template-columns: repeat(3, 1fr);
        grid-template-rows: 1fr 2fr 2fr 1fr;
        grid-template-areas: 
        "head head head"
        "aside section section"
        "aside article article"
        "footer footer footer"
        
        
        
        ;
        width: auto;
        height: 500px;
        border: solid var(--color-text-primary) 0.7px;
        text-align:center;
        margin:10px;
        font-size: 18px;
    
    }
    
    




}